name: Sync Fork with Upstream

on:
  schedule:
    - cron: "0 15 * * 3" # Every Wednesday at 15:00 UTC
  workflow_dispatch:

jobs:
  sync:
    if: github.repository != 'panther-labs/panther-analysis'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        id: set_upstream
        with:
          script: |
            const { data: { tag_name } } = await github.rest.repos.getLatestRelease({
              owner: 'panther-labs',
              repo: 'panther-analysis'
            });
            core.setOutput('latest-release', tag_name);

      - name: Create sync branch
        uses: peterjgrainger/action-create-branch@10c7d268152480ae859347db45dc69086cef1d9c #v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: "sync_upstream_${{steps.set_upstream.outputs.latest-release}}"

      - name: Checkout target branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          ref: "sync_upstream_${{steps.set_upstream.outputs.latest-release}}"
          fetch-depth: 0

      - name: Sync upstream changes into PR branch
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@1090e365224fc834e7e1de521c417ded2d6fcb53 #v3.4.1
        with:
          target_sync_branch: "sync_upstream_${{steps.set_upstream.outputs.latest-release}}"
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          upstream_sync_branch: "refs/tags/${{steps.set_upstream.outputs.latest-release}}"
          upstream_sync_repo: panther-labs/panther-analysis
          upstream_pull_args: "--allow-unrelated-histories"

      - name: Get default branch
        id: default-branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('name', repo.default_branch);

      - name: Remove .github directory changes
        if: steps.sync.outputs.has_new_commits == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git fetch origin ${{ steps.default-branch.outputs.name }}
          rm -rf .github/
          git checkout origin/${{ steps.default-branch.outputs.name }} -- .github/
          git add .github/
          git commit -m "Restore .github directory from default branch"
          git push origin "sync_upstream_${{steps.set_upstream.outputs.latest-release}}"

      - name: Create Pull Request
        if: steps.sync.outputs.has_new_commits == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            try {
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:sync_upstream_${{steps.set_upstream.outputs.latest-release}}`,
                state: 'open'
              });
              
              if (pulls.length === 0) {
                const { data: pr } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'Sync with upstream repository',
                  head: `sync_upstream_${{steps.set_upstream.outputs.latest-release}}`,
                  base: '${{ steps.default-branch.outputs.name }}',
                  body: 'Automated PR to sync changes from upstream repository'
                });
                console.log(`Created PR: ${pr.html_url}`);
              } else {
                console.log('PR already exists');
              }
            } catch (error) {
              console.log(`Error creating PR: ${error}`);
              core.setFailed(error.message);
            }
