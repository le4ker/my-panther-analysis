name: sync-panther-analysis-from-upstream

on:
  schedule:
    # 15:00Z, every Wednesday
    - cron: "00 15 * * 3"
  workflow_dispatch: # or on button click

env:
  YOUR_REPO_PRIMARY_BRANCH_NAME: "main"

jobs:
  check_upstream:
    if: |
      github.repository != 'panther-labs/panther-analysis'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.0
        id: set_upstream
        name: Check Upstream
        with:
          script: |
            const fs = require('fs');
            const upstreamLatest = await github.rest.repos.getLatestRelease({
              owner: 'panther-labs',
              repo: 'panther-analysis'
            })
            fs.appendFileSync(
              process.env['GITHUB_OUTPUT'],
              'latest-release=' +  upstreamLatest.data.tag_name + '\n');
      ## CREATE A BRANCH
      - uses: peterjgrainger/action-create-branch@10c7d268152480ae859347db45dc69086cef1d9c #v3.0.0
        id: create_a_branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: "sync_upstream_${{steps.set_upstream.outputs.latest-release}}"
      # Checkout this repo into the branch
      - name: Checkout your local repo in PR branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          ref: "sync_upstream_${{steps.set_upstream.outputs.latest-release}}"
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Sync with upstream while excluding .github directory
      - name: Sync upstream changes into PR branch (excluding .github)
        id: sync
        run: |
          # Configure Git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # Add the upstream repository as a remote and fetch the tag
          git remote add upstream https://github.com/panther-labs/panther-analysis.git
          git fetch upstream "refs/tags/${{steps.set_upstream.outputs.latest-release}}"
          
          # Fetch main branch to ensure we have its history
          git fetch origin main
          
          # Reset the current branch to main to ensure it has the same history
          git reset --hard origin/main
          
          # Clean working directory except .git and .github
          find . -mindepth 1 -not -path "./.git*" -not -path "./.github*" -delete
          
          # Create a temp dir to hold upstream files
          TEMP_DIR=$(mktemp -d)
          
          # Check out upstream files to temp directory
          git --work-tree="$TEMP_DIR" checkout FETCH_HEAD -- .
          
          # Remove .github directory from temp directory
          rm -rf "$TEMP_DIR/.github"
          
          # Copy files from temp directory to working directory (this won't include .github)
          cp -r "$TEMP_DIR"/* .
          
          # Clean up temp directory
          rm -rf "$TEMP_DIR"
          
          # Stage all changes
          git add -A
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit - everything already synced"
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
          else
            # Commit and push the changes
            git commit -m "Sync with upstream ${{steps.set_upstream.outputs.latest-release}} (excluding .github directory)"
            git push -f origin sync_upstream_${{steps.set_upstream.outputs.latest-release}}
            echo "has_new_commits=true" >> $GITHUB_OUTPUT
          fi
      
      # Create a PR from this branch back to this fork's primary branch
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.0
        id: create_pr
        name: Create a PR to bring upstream changes into the local repo primary branch
        if: steps.sync.outputs.has_new_commits == 'true'
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            try {
              // First ensure the branch is properly based on main
              const response = await github.rest.pulls.create({
                owner: '${{github.repository_owner}}',
                repo: '${{  github.event.repository.name }}',
                title: 'sync this fork to panther-labs/panther-analysis ${{steps.set_upstream.outputs.latest-release}}',
                head: 'sync_upstream_${{steps.set_upstream.outputs.latest-release}}',
                base: '${{env.YOUR_REPO_PRIMARY_BRANCH_NAME}}',
              });
            } catch(e) {
              console.log("Error creating PR:", e.message);
              
              if (e.message && e.message.includes('no history in common')) {
                console.log("Branches have no common history. This needs manual resolution.");
                fs.appendFileSync(
                  process.env['GITHUB_OUTPUT'],
                  'pr_state=no-common-history\n');
              } else if (e.response && e.response.data && e.response.data.errors && e.response.data.errors.length > 0 && e.response.data.errors[0].message && e.response.data.errors[0].message.includes('No commits between')) {
                fs.appendFileSync(
                  process.env['GITHUB_OUTPUT'],
                  'pr_state=no-updates\n');
              } else if (e.response && e.response.data && e.response.data.errors && e.response.data.errors.length > 0 && e.response.data.errors[0].message && e.response.data.errors[0].message.includes('A pull request already exists for')) {
                fs.appendFileSync(
                  process.env['GITHUB_OUTPUT'],
                  'pr_state=update-pr-already-exists\n');
              } else {
                fs.appendFileSync(
                  process.env['GITHUB_OUTPUT'],
                  'pr_state=error\n');
                console.log(e);
              }
            }
      - id: pr_not_needed_already_exists
        name: PR for latest release already exists
        if: ${{ steps.create_pr.outputs.pr_state == 'update-pr-already-exists' }}
        run: |
          echo "PR for latest release was previously created and is not closed"
      - id: pr_not_needed_in_sync
        name: Local repo already synced to latest release
        if: ${{ steps.create_pr.outputs.pr_state == 'no-updates' }}
        run: |
          echo "Local repo in sync with latest upstream release"
      - id: pr_common_history
        name: Branches have no common history
        if: ${{ steps.create_pr.outputs.pr_state == 'no-common-history' }}
        run: |
          echo "The sync branch has no common history with main. This requires manual review."
          echo "You may need to recreate the branch based on main first, then apply the changes."
      - id: pr_create_error
        name: Create PR step had an error
        if: ${{ steps.create_pr.outputs.pr_state == 'error' }}
        run: |
          echo "unhandled exception in PR create step. Check output of that step."
          exit 128
